#!/usr/bin/env ruby
require 'dokkufy'
require 'commander'
require 'terminal-table'

Commander.configure do
  program :name, 'Dokkufy'
  program :version, Dokkufy::VERSION
  program :description, 'An interactive script to enable Dokku on a server'
  program :help, 'Author', 'Cristiano Betta <cbetta@gmail.com>'

  command :'server' do |c|
    c.syntax = 'dokkufy server [<hostname> <username> <domain>]'
    c.description = "Installs Dokku on a Ubuntu 12.04 or 14.04 server"
    c.option '--version', Float, 'Dokku version'
    c.action do |args, options|
      hostname = args[0] || ask('Server hostname or IP: ')
      username = args[1] || ask('Username on server: ')
      domain   = args[2] || ask('Desired root domain (e.g. example.com): ')
      version  = options.version.nil? ? Dokkufy::Utils.stable_version : "v#{options.version}"

      server = Dokkufy::Server.new(hostname, username)
      server.dokkufy(version, domain)
    end
  end

  command :'plugin:list' do |c|
    c.syntax = 'dokkufy plugin:list'
    c.description = "Lists known Dokku plugins"
    c.option('--with-notes'){ $with_notes = true }
    c.action do |args, options|
      puts Terminal::Table.new rows: Dokkufy::Plugin.all($with_notes), headings: ["ID", "Name", "Description"]
    end
  end

  command :'plugin:install' do |c|
    c.syntax = 'dokkufy plugin:install <plugin_name_or_id> [<hostname> <username>]'
    c.description = "Installs a known Dokku plugin"
    c.action do |args, options|
      id_or_name  = args[0] || ask('Plugin ID or Name: ')
      hostname    = args[1] || ask('Server hostname or IP: ')
      username    = args[2] || ask('Username on server: ')
      Dokkufy::Plugin.new(hostname, username).install(id_or_name)
    end
  end

  command :'plugin:uninstall' do |c|
    c.syntax = 'dokkufy plugin:uninstall <plugin_name_or_id> [<hostname> <username>]'
    c.description = "Uninstalls a known Dokku plugin"
    c.action do |args, options|
      id_or_name  = args[0] || ask('Plugin ID or Name: ')
      hostname    = args[1] || ask('Server hostname or IP: ')
      username    = args[2] || ask('Username on server: ')
      Dokkufy::Plugin.new(hostname, username).uninstall(id_or_name)
    end
  end

  command :'app' do |c|
    c.syntax = 'dokkufy app <git_repo> [OR <hostname> <dokku_username>]'
    c.description = "Binds this app to a Dokku instance through git and a config file"
    c.action do |args, options|
      if args.empty?
        hostname    = ask('Server hostname or IP: ')
        username    = ask('Dokku username on server [dokku]: ')
        username    = "dokku" if username.strip == ""
        remote_name = ask("Dokkufy app name (for creating multiple dokku apps) [#{File.basename(Dir.getwd)}]: ")
        remote_name = "#{File.basename(Dir.getwd)}" if remote_name.strip == ""
        args        = [hostname, username]
      end
      Dokkufy::App.new([*args, remote_name]).dokkufy
    end
  end

  command :'app:clear' do |c|
    c.syntax = 'dokkufy app:clear'
    c.description = "Undokkufies this app"
    c.action do |args, options|
      Dokkufy::Git.new.clear
    end
  end

  command :'app:list' do |c|
    c.syntax = 'dokkufy app:list'
    c.description = 'Retrieves a list of available dokku apps for this application'
    c.action do |args, options|
      Dokkufy::Git.new.app_list
    end
  end

  command :'app:current' do |c|
    c.syntax = 'dokkufy app:current <app>'
    c.description = 'Sets or retrieves the current dokku app'
    c.action do |args, options|
      if args.empty?
        current_app = Dokkufy::Git.new.current_app

        if current_app
          puts current_app
        else
          puts 'There is no current dokku app specified. Either run `dokkufy app` to create one, or run `dokkufy app:list` and `dokkufy app:current` to specify the current remote.'
        end
      else
        Dokkufy::Git.new.current_app = args.first
      end
    end
  end

  command :'app:remove' do |c|
    c.syntax = 'dokkufy app:remove <app> <app> <app>'
    c.description = 'Remove a dokku app (this does not delete the app from your server)'
    c.action do |args, options|
      if args.count >= 1
        args.each { |arg| Dokkufy::Git.new.remove_app(arg) }
      else
        puts 'You must specify one or more apps to remove'
      end
    end
  end

  command :'git:push' do |c|
    c.syntax = 'dokkufy git:push [<app> <app> ...]'
    c.description = 'Push the current HEAD branch to the current dokku app. If app(s) are provided, the code is pushed to them instead.'
    c.action do |args, options|
      if args.count > 0
        args.each do |app_name|
          puts "Pushing code to #{app_name}."
          `git push #{app_name} master`
        end
      else
        git = Dokkufy::Git.new
        current_app = git.get_app_name(git.current_app)
        puts "Pushing code to #{current_app}."
        `git push #{current_app} master`
      end
    end
  end

  default_command :help
end
